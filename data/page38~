{
  "Body": "Moose File System (MooseFS) is a distributed file system developed by Core Technology. The lead developer is Jakub Kruszona-Zawadzki. MooseFS aims to be fault-tolerant, highly available, highly performing, scalable general-purpose network distributed file system for data centers. Initially proprietary code, it was released to the public as open source on May 5, 2008.\n\nCurrently two editions of MooseFS are available:\n MooseFS - released under GPLv2 license,\n MooseFS Professional Edition (MooseFS Pro) - release under proprietary license in binary packages form.\n\nDesign\nThe MooseFS follows similar design principles as Fossil (file system), Google File System, Lustre or Ceph. The file system comprises three components:\n\n Metadata server (MDS) \u2014 manages the location (layout) of files, file access and namespace hierarchy. The current version of MooseFS does support multiple metadata servers and automatic failover. Clients only talk to the MDS to retrieve/update a file's layout and attributes; the data itself is transferred directly between clients and chunk servers. The Metadata server is a user-space daemon; the metadata is kept in memory and lazily stored on local disk.\n\n Metalogger server \u2014 periodically pulls the metadata from the MDS to store it for backup. Since version 1.6.5, this is an optional feature.\n\n Chunk servers (CSS) \u2014 store the data and optionally replicate it among themselves. There can be many of them, though the scalability limit has not been published. The biggest cluster reported so far consists of 160 servers. The Chunk server is also a user-space daemon that relies on the underlying local file system to manage the actual storage.\n\n Clients \u2014 talk to both the MDS and CSS. MooseFS clients mount the file system into user-space via FUSE.\n\nFeatures\n\nTo achieve high reliability and performance MooseFS offers the following features:\n\n Fault-tolerance \u2014 MooseFS uses replication, data can be replicated across chunkservers, the replication ratio (N) is set per file/directory. If (N-1) replicas fail the data will still be available. At the moment MooseFS does not offer any other technique for fault-tolerance. Fault-tolerance for very big files thus requires vast amount of space - N*filesize instead of filesize+(N*stripesize) as would be the case for RAID 4, RAID 5 or RAID 6. Version 4.x PRO of MooseFS will have RAID6.\n\n Striping \u2014 large files are divided into chunks (up to 64 megabytes) that might be stored on different chunk servers in order to achieve higher aggregate bandwidth.\n\n Load balancing \u2014 MooseFS attempts to use storage resources equally, the current algorithm seems to take into account only the consumed space.\n\n Security \u2014 Apart from classical POSIX file permissions, since the 1.6 release MooseFS offers a simple, NFS-like, authentication/authorization.\n\n Snapshots - Quick, low-overhead snapshots.\n\nHardware, software and networking\n\nSimilarly to other cluster-based file systems MooseFS uses commodity hardware running a POSIX compliant operating system. TCP/IP is used as the interconnect.\n\nSee also\n\n Distributed file system\n List of file systems, the distributed fault-tolerant file system section\n Ceph\n Lustre\n GlusterFS\n\nReferences\n\nExternal links\n Moose File System official website\n MooseFS project page at SourceForge.net\n MooseFS on GitHub\n LizardFS a fork of old version (1.6.27) of MooseFS licensed under the terms of the GPL-3.\n\nCategory:Distributed file systems\nCategory:Linux kernel-supported distributed file systems\nCategory:Network file systems\nCategory:User space file systems\nCategory:Formerly free software",
  "Title": "Moose File System",
  "Authors": [
    "Oxide94",
    "Oxide94",
    "Txt.file",
    "Oxide94",
    "Oxide94"
  ],
  "ID": 38
}